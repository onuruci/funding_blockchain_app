{"version":3,"sources":["util/interact.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","fundMeContract","eth","Contract","getTotalAmountFunded","a","methods","getTotalAmount","call","totalAmount","console","log","donate","address","value","transactionParameters","to","from","parseInt","toString","data","fund","encodeABI","window","ethereum","request","method","params","txHash","status","message","connectWallet","addressArray","obj","target","href","getCurrentWalletConnected","length","Home","useState","walletAddress","setWallet","setStatus","ethAmountToSend","setEthAmount","setTotalAmount","setMessage","useLayoutEffect","walletConnection","total","handleConnect","handleDonate","weiValue","utils","toWei","hash","handleDisconnect","type","onChange","e","handleInputChange","handleMessageChange","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.160a98ac.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x99A4011f1C715dcCdd1Ae7B9C0c94BBCF183cDDb\";\n\n\nexport const fundMeContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\n\nexport const getTotalAmountFunded = async () => {\n    const totalAmount = await fundMeContract.methods.getTotalAmount().call();\n    console.log('Total: ',totalAmount);\n    return totalAmount;\n};\n\nexport const donate = async (address, value) => {\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    value: parseInt(value).toString(16),\n    data: fundMeContract.methods.fund(\"hello\").encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    console.log(txHash);\n    return {\n      status: \" Once the transaction is verified by the network, the message will be updated automatically.\",\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n        try {\n          const addressArray = await window.ethereum.request({\n            method: \"eth_requestAccounts\",\n          });\n          const obj = {\n            status: \"👆🏽 Write a message in the text-field above.\",\n            address: addressArray[0],\n          };\n          return obj;\n        } catch (err) {\n          return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n          };\n        }\n      } else {\n        return {\n          address: \"\",\n          status: (\n            <span>\n              <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                  You must install Metamask, a virtual Ethereum wallet, in your\n                  browser.\n                </a>\n              </p>\n            </span>\n          ),\n        };\n      }\n};\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n          const addressArray = await window.ethereum.request({\n            method: \"eth_accounts\",\n          });\n          if (addressArray.length > 0) {\n            return {\n              address: addressArray[0],\n              status: \"👆🏽 Write a message in the text-field above.\",\n            };\n          } else {\n            return {\n              address: \"\",\n              status: \"🦊 Connect to Metamask using the top right button.\",\n            };\n          }\n        } catch (err) {\n          return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n          };\n        }\n      } else {\n        return {\n          address: \"\",\n          status: (\n            <span>\n              <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                  You must install Metamask, a virtual Ethereum wallet, in your\n                  browser.\n                </a>\n              </p>\n            </span>\n          ),\n        };\n      }\n};","import react from \"react\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport {\n    connectWallet, \n    getCurrentWalletConnected,\n    getTotalAmountFunded,\n    donate\n } from \"./util/interact\";\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n\nconst Home = () => {\n\n    const [walletAddress, setWallet] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n    const [funds, setFunds] = useState([]);\n    const [ethAmountToSend, setEthAmount] = useState(0);\n    const [totalAmount, setTotalAmount] = useState(0);\n    const [message, setMessage] = useState('');\n\n    useLayoutEffect(() => {\n        const walletConnection = async () => {\n            const {address, status} = await getCurrentWalletConnected();\n            setWallet(address);\n            setStatus(status);\n        };\n        const getTotalAmount = async () => {\n            const total = await getTotalAmountFunded();\n            setTotalAmount(total);\n        }\n        walletConnection();\n        getTotalAmount();\n    });\n\n    const handleConnect = async () => {\n        const {address, status} = connectWallet();\n        setWallet(address);\n        setStatus(status);\n    };\n\n    const handleInputChange = (e) => {\n        setEthAmount(e.target.value);\n    };\n\n    const handleDonate = async () => {\n        const weiValue = web3.utils.toWei(ethAmountToSend.toString(), 'ether');\n        console.log(weiValue);\n        const hash = await donate(walletAddress, weiValue);\n        console.log(hash);\n    };\n\n    const handleDisconnect = async () => {\n\n    };\n\n    const handleMessageChange = (e) => {\n        setMessage(e.target.value);\n    };\n\n    return(\n        <div>\n            <h1>Fund Us</h1>\n            <h2>About fund us project</h2>\n            <p>\n                This project is developed for testing and learning purposes. Smart Contract\n                runs on Ropsten Test Chain. You can send us Ropsten Eth to test the project. Thanks :).\n            </p>\n            <h3>\n                COntract Address:  0x99A4011f1C715dcCdd1Ae7B9C0c94BBCF183cDDb\n            </h3>\n            <div>\n                <div>You can use</div>\n                <a href=\"https://ropsten.etherscan.io/\">Ropsten Etherscan</a>\n                <div> to view the contract code.</div>\n            </div>\n            <div>\n                Total Amount Funded : {totalAmount}\n            </div>\n            <div>\n                <input type=\"number\" value={ethAmountToSend} onChange={e => handleInputChange(e)}/>\n                <input type=\"text\" value={message} onChange={e => handleMessageChange(e)} />\n                <button onClick={handleDonate}>Donate</button>\n            </div>\n            <h1>Wallet:  {walletAddress}</h1>\n            <h1>Status:  {status}</h1>\n            <button onClick={handleConnect}>Connect</button>\n            <button onClick={handleDisconnect}>Disconnect</button>\n\n        </div>\n    );\n};\n\nexport default Home","import react from \"react\";\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home>\n      </Home>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}