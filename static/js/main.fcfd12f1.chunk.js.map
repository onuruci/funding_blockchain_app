{"version":3,"sources":["util/interact.js","Home.js","AdminPage.js","decentralized.png","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","fundMeContract","eth","Contract","getTotalAmountFunded","a","methods","getTotalAmount","call","totalAmount","console","log","donate","address","value","transactionParameters","to","from","parseInt","toString","data","fund","encodeABI","window","ethereum","request","method","params","txHash","status","message","connectWallet","addressArray","obj","target","href","getCurrentWalletConnected","length","Home","walletAddress","useState","ethAmountToSend","setEthAmount","setTotalAmount","setMessage","useLayoutEffect","total","parseFloat","utils","fromWei","toFixed","handleDonate","weiValue","toWei","hash","className","type","onChange","e","handleInputChange","placeholder","handleMessageChange","onClick","AdminPage","Nav","handleConnect","src","webIcon","alt","slice","App","setWallet","setStatus","useEffect","walletConnection","path","element","wallet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcfd12f1.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x99A4011f1C715dcCdd1Ae7B9C0c94BBCF183cDDb\";\n\n\nexport const fundMeContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\n\nexport const getTotalAmountFunded = async () => {\n    const totalAmount = await fundMeContract.methods.getTotalAmount().call();\n    console.log('Total: ',totalAmount);\n    return totalAmount;\n};\n\nexport const donate = async (address, value) => {\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    value: parseInt(value).toString(16),\n    data: fundMeContract.methods.fund(\"hello\").encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    console.log(txHash);\n    return {\n      status: \" Once the transaction is verified by the network, the message will be updated automatically.\",\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n        try {\n          const addressArray = await window.ethereum.request({\n            method: \"eth_requestAccounts\",\n          });\n          const obj = {\n            status: \"👆🏽 You can send ropsten ether\",\n            address: addressArray[0],\n          };\n          return obj;\n        } catch (err) {\n          return {\n            address: \"\",\n            status: \"😥 \" + err.message,\n          };\n        }\n      } else {\n        return {\n          address: \"\",\n          status: (\n            <span>\n              <p>\n                {\" \"}\n                🦊{\" \"}\n                <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                  You must install Metamask, a virtual Ethereum wallet, in your\n                  browser.\n                </a>\n              </p>\n            </span>\n          ),\n        };\n      }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({method: \"eth_accounts\",});\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 You can send some ropsten ether\",\n        };\n      } \n      else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n      <span>\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      </span>\n      ),\n    };\n  }\n};","import react from \"react\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport './style.css'\nimport {\n    getTotalAmountFunded,\n    donate\n} from \"./util/interact\";\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\n\nconst Home = ({walletAddress, status}) => {\n\n    const [funds, setFunds] = useState([]);\n    const [ethAmountToSend, setEthAmount] = useState(0);\n    const [totalAmount, setTotalAmount] = useState(0);\n    const [message, setMessage] = useState('');\n\n    useLayoutEffect(() => {\n        const getTotalAmount = async () => {\n            const total = await getTotalAmountFunded();\n            setTotalAmount(parseFloat(web3.utils.fromWei(total.toString(), 'ether')).toFixed(2));\n        }\n        getTotalAmount();\n    }, []);\n\n    const handleInputChange = (e) => {\n        setEthAmount(e.target.value);\n    };\n\n    const handleDonate = async () => {\n        const weiValue = web3.utils.toWei(ethAmountToSend.toString(), 'ether');\n        console.log(weiValue);\n        const hash = await donate(walletAddress, weiValue);\n        console.log(hash);\n        setEthAmount(0);\n        setMessage(\"\");\n    };\n\n    const handleDisconnect = async () => {\n\n    };\n\n    const handleMessageChange = (e) => {\n        setMessage(e.target.value);\n    };\n\n    return (\n\n        <div className=\"root\">\n            <div className=\"content\">\n                <div className=\"content-main-text\">\n                    Fund Us Project\n                </div>\n                <div className=\"content-sub-text\">\n                    This project is developed for learning purposes</div>\n                <div className=\"content-sub-text\"> \n                    by onuruci and tunahandundar.\n                </div>\n                <div className=\"content-sub-text\">The contract of this project runs on Ethereum Ropsten test chain. Main purpose of the contract is to\n                    collect funds and let the admin to withdraw those funds or give admin status to some else.\n                    You can test this project by sending us Ropsten ETH :).\n                </div>\n\n                <div className=\"statistics-section\">\n                    <div className=\"box box-1\">\n                        <div className=\"change\">\n                            +\n                        </div>\n                        <div className=\"centered-main\">\n                            <div className=\"amount\">\n                                {totalAmount} ETH\n                            </div>\n                            <div className=\"explainment\">\n                                Total Funded\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"box box-2\" >\n                        <div className=\"change\">\n                            +/- 5%\n                        </div>\n                        <div className=\"centered-main\">\n                            <div className=\"amount\">\n                                100 ETH\n                            </div>\n                            <div className=\"explainment\">\n                                Aim\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div className=\"input-section\">\n                <div className=\"info-div\">\n                    <div>Wallet:  {walletAddress}</div>\n                     <div>Status:  {status}</div>\n                </div>\n                <div className=\"donate-section\">\n                    <input type=\"number\" value={ethAmountToSend} onChange={e => handleInputChange(e)}/>\n                    <input type=\"text\" value={message} placeholder = \"message\" onChange={e => handleMessageChange(e)} />\n                    <button className=\"donate-button\" onClick={handleDonate}>Donate</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home","import react from \"react\"\n\n\nconst AdminPage = ({walletAddress, status}) => {\n    return(\n        <div>\n            <h1>Admin Page</h1>\n            <button>Withdraw Funds</button>\n        </div>\n    );\n}\n\n\nexport default AdminPage;\n","export default __webpack_public_path__ + \"static/media/decentralized.a67394cf.png\";","import react from \"react\";\nimport { Router, Link } from \"react-router-dom\";\n\nimport webIcon from './decentralized.png'\nimport './style.css'\n\nconst Nav = ({walletAddress, handleConnect}) => {\n    return(\n        <div className=\"footer\">\n            <div className=\"left-side\">\n                <Link to={process.env.PUBLIC_URL +'/'} className=\"linker\">\n                    <div className=\"main-tab\">\n                        <img src={webIcon} className=\"main-icon\" alt=\"main-icon\"></img>\n                        <div className=\"main-tab-text\">\n                            Fund Us\n                        </div>\n                    </div>\n                </Link>\n                <Link to={process.env.PUBLIC_URL +'/admin/'} className=\"linker\">\n                    <button className=\"left-tab\">\n                        Admin Page\n                    </button>\n                </Link>\n                <Link to={process.env.PUBLIC_URL +'/funds'} className=\"linker\">\n                    <button className=\"left-tab\">\n                        View Earlier Donations\n                    </button>\n                </Link>\n            </div>\n\n            {\n                walletAddress !== \"\" ? <div className=\"right-side\">\n                    <button className=\"right-tab\">\n                        Wallet Connected {walletAddress.slice(0,8)}...\n                    </button>\n                </div> :\n                <div className=\"right-side\">\n                    <button className=\"right-tab\" onClick={handleConnect}>\n                        Connect Wallet\n                    </button>\n                </div>\n            }\n\n        </div>\n    );\n};\n\nexport default Nav;","import react from \"react\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nimport Home from \"./Home\";\nimport AdminPage from \"./AdminPage\";\nimport Nav from \"./Nav\";\nimport Funds from './Funds';\n\nimport {\n  getCurrentWalletConnected,\n  connectWallet\n} from \"./util/interact\";\n\nrequire('dotenv').config();\nconst App = () => {\n\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n\n  useEffect(() => {\n    const walletConnection = async () => {\n        const { address, status } = await getCurrentWalletConnected();\n        setWallet(address);\n        setStatus(status);\n    };\n    walletConnection();\n  }, []);\n\n  const handleConnect = async () => {\n    const { address, status } = connectWallet();\n    setWallet(address);\n    setStatus(status);\n  };\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Nav walletAddress={walletAddress} handleConnect={handleConnect}/>\n        <Routes>\n          <Route path={process.env.PUBLIC_URL +'/'} element={<Home walletAddress={walletAddress} status={status}/>}/>\n          <Route path={process.env.PUBLIC_URL +'/admin/'} element={<AdminPage wallet={walletAddress} status={status}/>} />\n          <Route path={process.env.PUBLIC_URL +'/funds/'} element={<>Hii</>}/>\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}